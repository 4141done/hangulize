# -*- coding: utf-8 -*-
import re
from hangulize import *


class Dutch(Language):
    """For transcribing Dutch."""

    vowels = 'aeEioOuUyQ'
    cs = 'b', 'B', 'c', 'C', 'd', 'D', 'f', 'F', 'g', 'G', 'h', 'j', 'J', \
         'k', 'K', 'l', 'm', 'n', 'N', 'p', 'P', 'q', 'r', 's', 't', 'T', \
         'v', 'w', 'x', 'X', 'z', '%' # consonants
    son = 'l', 'm', 'n', 'N', 'r' # sonorants
    short = 'a', 'e', 'E', 'i', 'o', 'u', 'U' # short vowels
    notation = Notation(
        (u'ë', '-e-'),
        (u'é', 'E'),
        (u'ï', '-i-'),
        ('^\'t', 'Qt,'),
        ('^big', 'bigg'),
        ('ex', 'Ex'),
        ('term', 'tErm'),
        ('weg', 'wEg'),
        ('werk', 'wErk'),
        ('bijec', 'bi-jec'),
        ('bijou', 'bizoe'),
        ('advocaat', 'aDvocaat'),
        ('andelst', 'andElst'),
        ('christ', 'krist'),
        ('curacao', 'curaso'),
        ('drenthe', 'drente'),
        ('eindhoven', 'einthoven'),
        ('eugene', 'euzEn'),
        ('gabriel', 'GabriEl'),
        ('gogh', 'Gogh'),
        ('israel', 'israEl'),
        ('isra-e-l', 'israEl'),
        ('johannes', 'johannEs'),
        ('jozef', 'jozEf'),
        ('lyonnet', 'lyonnE'),
        ('michael', 'mikaEl'),
        ('micha-e-l', 'mikaEl'),
        ('pierre', 'piEr'),
        ('adrien', 'adri-en'),
        ('richard', 'rikard'),
        ('vincent', 'wincEnt'),
        ('berg', 'bErg'),
        ('echt', 'Echt'),
        ('tie$', 'sie'),
        ('ier$', 'i%er'),
        ('{<cs>}ig$', 'Qg'),
        ('^over', 'ovQr'),
        ('sch{@}', 'sX'),
        ('sch', 's'),
        ('ch', 'X'),
        ('c{e|E|i|y}', 's'),
        ('c', 'k'),
        ('qq', 'q'),
        ('qu', 'kw'),
        ('q', 'k'),
        ('x', 'ks'),
        ('ng', 'N'),
        ('nk', 'Nk'),
        ('dt$', 't'),
        ('dt{<cs>}', 't'),
        ('gh', 'g'),
        ('ph', 'p'),
        ('^th', 't'),
        ('^kh', 'k'),
        ('h{<cs>}', None),
        ('h$', None),
        ('sj{@}', 'sJ'),
        ('sj', 'si'),
        ('sz$', 's'),
        ('sz{<cs>}', 's'),
        ('ts', 'C'),
        ('tz', 'C'),
        ('^v', 'f'),
        ('uw', 'uW'),
        ('w', 'v'),
        ('v$', 'f'),
        ('^y{@}', 'j'),
        ('y', 'i-'),
        ('z$', 's'),
        ('bb', 'b'),
        ('dd', 'd'),
        ('ff', 'f'),
        ('gg', 'g'),
        ('hh', 'h'),
        ('kk', 'k'),
        ('ll', 'l'),
        ('mm', 'm'),
        ('nn', 'n'),
        ('pp', 'p'),
        ('rr', 'r'),
        ('ss', 's'),
        ('tt', 't'),
        ('ww', 'w'),
        ('b$', '-p'),
        ('d$', '-t'),
        ('^ie{<cs>}', 'i'),
        ('{<cs>}ie{<cs>}', 'i'),
        ('^oe{<cs>}', 'U'),
        ('{<cs>}oe{<cs>}', 'U'),
        ('b{@|<son>|j}', 'B'),
        ('{<son>}b', 'B'),
        ('^{(<short>)}b{<cs>}', 'P'),
        ('{(<cs>)(<short>)}b{<cs>}', 'P'),
        ('B', 'b'),
        ('d{@|<son>|j}', 'D'),
        ('{<son>}d', 'D'),
        ('^{(<short>)}d{<cs>}', 'T'),
        ('{(<cs>)(<short>)}d{<cs>}', 'T'),
        ('D', 'd'),
        ('p{@|<son>|j}', 'F'),
        ('{<son>}p', 'F'),
        ('^{(<short>)}p{<cs>}', 'P'),
        ('{(<cs>)(<short>)}p{<cs>}', 'P'),
        ('^{(<short>)}p$', 'P'),
        ('{(<cs>)(<short>)}p$', 'P'),
        ('F', 'p'),
        ('t{@|<son>|j}', 'F'),
        ('{<son>}t', 'F'),
        ('^{(<short)>}t{<cs>}', 'T'),
        ('{(<cs>)(<short>)}t{<cs>}', 'T'),
        ('^{(<short>)}t$', 'T'),
        ('{(<cs>)(<short>)}t$', 'T'),
        ('F', 't'),
        ('k{@|<son>|j}', 'F'),
        ('{<son>}k', 'F'),
        ('^{(<short>)}k{<cs>}', 'K'),
        ('{(<cs>)(<short>)}k{<cs>}', 'K'),
        ('^{(<short>)}k$', 'K'),
        ('{(<cs>)(<short>)}k$', 'K'),
        ('F', 'k'),
        ('{b|d|p|t|k}j', 'Yj'),
        ('ds', 'C'),
        ('dz', 'C'),
        ('{@}ie', 'i%e'),
        ('ae', 'aa'),
        ('aa', 'a'),
        ('auW', 'aU%'),
        ('au', 'aU%'),
        ('ouW', 'aU%'),
        ('ou', 'aU%'),
        ('{@}iji', 'i'),
        ('{@}ij{@}', 'i-j'),
        ('{@}ij', 'i%'),
        ('ij', 'ei'),
        ('eeuW', 'eiU%'),
        ('ieuW', 'iU%'),
        ('euW', 'e-u%'),
        ('iee', 'i%ee'),
        ('ee', 'ei'),
        ('oo', 'o'),
        ('ui', 'au%'),
        ('uy', 'au%'),
        ('eu', 'O%'),
        ('ue', 'uu'),
        ('uW', 'uu%'),
        ('uu', 'u'),
        ('i%i', 'i'),
        ('ie', 'i'),
        ('ii', 'i'),
        ('oe', 'U'),
        ('-', None),
        ('e$', 'Q'),
        ('^e{(<cs>)}$', 'E'),
        ('^{(<cs>)}e{(<cs>)}$', 'E'),
        ('^{(<cs>)(<cs>)}e{(<cs>)}$', 'E'),
        ('^{(<cs>)(<cs>)(<cs>)}e{(<cs>)}$', 'E'),
        ('^e{(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)}e{(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)(<cs>)}e{(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)(<cs>)(<cs>)}e{(<cs>)(<cs>)}$', 'E'),
        ('^e{(<cs>)(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)}e{(<cs>)(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)(<cs>)}e{(<cs>)(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)(<cs>)(<cs>)}e{(<cs>)(<cs>)(<cs>)}$', 'E'),
        ('^e{(<cs>)(<cs>)(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)}e{(<cs>)(<cs>)(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)(<cs>)}e{(<cs>)(<cs>)(<cs>)(<cs>)}$', 'E'),
        ('^{(<cs>)(<cs>)(<cs>)}e{(<cs>)(<cs>)(<cs>)(<cs>)}$', 'E'),
        ('{<cs>}e{(<cs>)}$', 'Q'),
        ('{<cs>}e{(<cs>)(<cs>)}$', 'Q'),
        ('{<cs>}e{(<cs>)(<cs>)(<cs>)}$', 'Q'),
        ('{<cs>}e{(<cs>)(<cs>)(<cs>)(<cs>)}$', 'Q'),
        ('E', 'e'),
        ('P', 'p,'),
        ('T', 't,'),
        ('K', 'k,'),
        ('j{@}', 'J'),
        ('j', 'i'),
        ('{C|z}J', None),
        ('^l', 'l;'),
        ('^m', 'm;'),
        ('^n', 'n;'),
        ('l$', 'l,'),
        ('m$', 'm,'),
        ('n$', 'n,'),
        ('l{@|m,|n,|N}', 'l;'),
        ('{,}l', 'l;'),
        ('m{@}', 'm;'),
        ('n{@}', 'n;'),
        ('l', 'l,'),
        ('m', 'm,'),
        ('n', 'n,'),
        ('N', 'N,'),
        (',,', ','),
        (',;', None),
        (',l,', 'l,'),
        (',m,', 'm,'),
        (',n,', 'n,'),
        (',N,', 'N,'),
        ('l{m;|n;}', 'l,'),
        (';', None),       
        ('b', Choseong(B)),
        ('C', Choseong(C)),
        ('d', Choseong(D)),
        ('f', Choseong(P)),
        ('g', Choseong(H)),
        ('G', Choseong(G)),
        ('h', Choseong(H)),
        ('k,', Jongseong(G)),
        ('k', Choseong(K)),
        ('^l', Choseong(L)),
        ('{,}l', Choseong(L)),
        ('l,', Jongseong(L)),
        ('l', Jongseong(L), Choseong(L)),
        ('m,', Jongseong(M)),
        ('m', Choseong(M)),
        ('n,', Jongseong(N)),
        ('n', Choseong(N)),
        ('N', Jongseong(NG)),
        ('p,', Jongseong(B)),
        ('p', Choseong(P)),
        ('r', Choseong(L)),
        ('s', Choseong(S)),
        ('t,', Jongseong(S)),
        ('t', Choseong(T)),
        ('v', Choseong(B)),
        ('X', Choseong(H)),
        ('z', Choseong(J)),
        ('Ja', Jungseong(YA)),
        ('Je', Jungseong(YE)),
        ('Ji', Jungseong(I)),
        ('Jo', Jungseong(YO)),
        ('JO', Jungseong(YE)),
        ('Ju', Jungseong(YU)),
        ('JU', Jungseong(YU)),
        ('JQ', Jungseong(YEO)),
        ('a', Jungseong(A)),
        ('e', Jungseong(E)),
        ('i', Jungseong(I)),
        ('o', Jungseong(O)),
        ('O', Jungseong(OE)),
        ('u', Jungseong(WI)),
        ('U', Jungseong(U)),
        ('Q', Jungseong(EO)),
        ('Y', Jungseong(EU)),
    )

    def normalize(self, string):
        def normalize_only_unsafe(string):
            map = {u'Ë': u'ë',
                   u'É': u'é',
                   u'È': u'é',
                   u'è': u'é',
                   u'Ê': u'é',
                   u'ê': u'é',
                   u'Ï': u'ï',
                   u'Ḯ': u'ï', 
                   u'Ḯ': u'ï',
                   u'Ĳ': u'ij',
                   u'ĳ': u'ij',
                   u'Ÿ': u'ij',
                   u'ÿ': u'ij'}
            safe = map.keys() + map.values()
            for c in string:
                if c not in safe:
                    yield normalize_roman(c)
                elif c in map:
                    yield map[c]
                else:
                    yield c
        return ''.join(normalize_only_unsafe(string))


nl = Dutch
